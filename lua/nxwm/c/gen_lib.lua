if not vim then error('needs to be run with neovim') end
local function gen_lib(outfile,libpaths,libname)
    local source={}
    table.insert(source,[[--[[]])
    table.insert(source,'This file is autogenerated from gen_lib.lua')
    table.insert(source,'Regenerate:')
    table.insert(source,'nvim -l gen_lib.lua')
    table.insert(source,'--]]')
    table.insert(source,'')
    table.insert(source,'local ffi=require"ffi"')
    table.insert(source,'ffi.cdef[[')
    local tempfile=vim.fn.tempname()..'.h'
    for _,lib in ipairs(libpaths) do
        local libs=vim.fn.readfile(lib)
        for _,line in ipairs(libs) do
            local expr,name,number=0,nil,nil
            name,number=line:match('^#define%s+([%w_]+)%s+0x(%x+)')
            if name then number=tonumber(number,16) end
            if not name then
                name,number=line:match('^#define%s+([%w_]+)%s+(%d+)')
            end
            if not name then
                name,number,expr=line:match('^#define%s+([%w_]+)%s+%((%d)L?<<(%d+)%)')
            end
            if name then
                table.insert(source,string.format('enum {%s=%s};',name,number*(2^expr)))
            end
        end
        vim.fn.writefile(libs,tempfile)
        for _,line in ipairs(vim.fn.systemlist({'gcc','-E',tempfile})) do
            if not vim.startswith(line,'#') and vim.trim(line)~='' then
                table.insert(source,line)
            end
        end
    end
    table.insert(source,']]')
    table.insert(source,string.format('local ns=ffi.load"%s"',libname))
    table.insert(source,'---@cast ns table')
    table.insert(source,'return ns')
    vim.fn.writefile(source,outfile)
end
gen_lib('xlib.lua',{
    '/usr/include/X11/Xlib.h',
    '/usr/include/X11/X.h',
    '/usr/include/X11/keysymdef.h',
},'X11')
gen_lib('clib.lua',{
    '/usr/include/sys/ioctl.h',
    '/usr/include/asm-generic/ioctls.h',
},'c')
