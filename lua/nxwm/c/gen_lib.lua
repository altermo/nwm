if not vim then error('needs to be run with neovim') end
local function gen_lib(outfile,libpaths,libname)
    local source=vim.split([=[
--[[
DO NOT EDIT
This file is autogenerated from gen_lib.lua
To regenerate this file, run `nvim -l gen_lib.lua`
--]]
]=],'\n')
    table.insert(source,'local ffi=require"ffi"')
    table.insert(source,'ffi.cdef[=[')
    for _,lib in ipairs(libpaths) do
        for line in io.lines(lib) do
            for _,pattern in ipairs{
                {'^#define%s+([%w_]+)%s+0x(%x+)',16},
                {'^#define%s+([%w_]+)%s+(%d+)'},
                {'^#define%s+([%w_]+)%s+%((%d)L?<<(%d+)%)'},
            } do
                local name,number,expr=string.match(line,pattern[1])
                if name then
                    table.insert(source,('enum {%s=%s};'):format(name,tonumber(number,pattern[2])*(2^(expr or 0))))
                    break
                end
            end
        end
        for _,line in ipairs(vim.fn.systemlist({'gcc','-E',lib})) do
            if not vim.startswith(line,'#') and vim.trim(line)~='' then
                table.insert(source,line)
            end
        end
    end
    table.insert(source,']=]')
    table.insert(source,('return ffi.load"%s" --[[@as table]]'):format(libname))
    vim.fn.writefile(source,outfile)
end
gen_lib('xlib.lua',{
    '/usr/include/X11/Xlib.h',
    '/usr/include/X11/X.h',
    '/usr/include/X11/keysymdef.h',
},'X11')
gen_lib('clib.lua',{
    '/usr/include/sys/ioctl.h',
    '/usr/include/asm-generic/ioctls.h',
},'c')
